1 소개
웹 프록시는 웹 브라우저와 최종 서버 사이에서 중개자 역할을 하는 프로그램입니다. 브라우저는 웹 페이지를 가져오기 위해 최종 서버에 직접 연결하지 않고 프록시에 연결하여 요청을 최종 서버로 전달합니다. 최종 서버가 프록시에 응답하면 프록시는 브라우저로 응답을 보냅니다.
프록시는 여러 용도로 유용합니다. 프록시는 방화벽에서 사용되기도 하는데, 방화벽 뒤에 있는 브라우저가 프록시를 통해서만 방화벽 너머의 서버에 연결할 수 있도록 하기 위해서입니다. 프록시는 모든 식별 정보를 요청에서 제거함으로써 브라우저를 웹 서버에 대해 익명으로 만들 수 있는 익명화 도구로도 사용할 수 있습니다. 프록시는 서버에서 객체의 로컬 복사본을 저장한 다음 원격 서버와 다시 통신하지 않고 캐시에서 객체를 읽어 향후 요청에 응답함으로써 웹 객체를 캐시하는 데에도 사용할 수 있습니다.
이 실습에서는 웹 객체를 캐시하는 간단한 HTTP 프록시를 작성합니다. 

실습의 첫 번째 파트에서는 들어오는 연결을 수락하고, 요청을 읽고 구문 분석하고, 요청을 웹 서버로 전달하고, 서버의 응답을 읽고, 해당 응답을 해당 클라이언트로 전달하도록 프록시를 설정합니다. 

첫 번째 파트에서는 기본적인 HTTP 작동과 소켓을 사용하여 네트워크 연결을 통해 통신하는 프로그램을 작성하는 방법을 배웁니다. 

두 번째 파트에서는 여러 동시 연결을 처리하도록 프록시를 업그레이드합니다. 이를 통해 중요한 시스템 개념인 동시성 처리에 대해 소개합니다. 

세 번째이자 마지막 파트에서는 최근에 액세스한 웹 콘텐츠의 간단한 메인 메모리 캐시를 사용하여 프록시에 캐싱을 추가합니다.

4 1부: 순차적 웹 프록시 구현하기
첫 번째 단계는 HTTP/1.0 GET 요청을 처리하는 기본 순차 프록시를 구현하는 것입니다. POST와 같은 다른 요청 유형은 엄격하게 선택 사항입니다.
프록시가 시작되면 프록시는 명령줄에 지정된 포트에서 들어오는 연결을 수신 대기해야 합니다. 연결이 설정되면 프록시는 클라이언트로부터 전체 요청을 읽고 
요청 전체를 읽고 요청을 파싱해야 합니다. 프록시는 클라이언트가 유효한 HTTP 요청을 보냈는지 확인해야 합니다; 
그렇다면 적절한 웹 서버에 자체적으로 연결을 설정한 다음 클라이언트가 지정한 객체를 요청할 수 있습니다. 
객체를 요청합니다. 마지막으로 프록시는 서버의 응답을 읽고 이를 클라이언트에 전달해야 합니다.
4.1 HTTP/1.0 GET 요청  [GET 요청URI http버전]
최종 사용자가 웹 브라우저의 주소 표시줄에 http://www.cmu.edu/hub/index.html 같은 URL을 입력하면 
바에 입력하면 브라우저는 다음과 같은 줄로 시작하는 HTTP 요청을 프록시로 전송합니다. 
다음과 유사한 줄로 시작하는 HTTP 요청을 프록시로 보냅니다:
GET http://www.cmu.edu/hub/index.html HTTP/1.1

URI 에서 호스트랑 호스트 뒷부분을 반띵
-> 

이 경우 프록시는 요청을 최소한 호스트 이름, www.cmu.edu; 
경로 또는 쿼리, 그리고 그 뒤에 오는 모든 것(/hub/index.html)으로 구문 분석해야 합니다. 이렇게 하면 프록시는 다음을 결정할 수 있습니다. 
www.cmu.edu 에 대한 연결을 열고 다음 형식의 한 줄로 시작하는 자체 HTTP 요청을 보내야 한다는 것을 결정할 수 있습니다:
GET /hub/index.html HTTP/1.0
HTTP 요청의 모든 줄은 캐리지 리턴인 '\r'과 개행인 '\n'으로 끝납니다. 또한 모든 HTTP 요청은 빈 줄로 종료된다는 점도 중요합니다: "\r\n".

위 예시에서 웹 브라우저의 요청 줄은 HTTP/1.1로 끝나는 반면 프록시의 요청 줄은 HTTP/1.0으로 끝나는 것을 확인할 수 있습니다. 최신 웹 브라우저는 HTTP/1.1 요청을 생성하지만 프록시는 이를 처리하여 HTTP/1.0 요청으로 전달해야 합니다.
HTTP 요청, 심지어 HTTP/1.0 GET 요청의 하위 집합조차도 엄청나게 복잡할 수 있다는 점을 고려하는 것이 중요합니다. 교과서에서는 HTTP 트랜잭션의 특정 세부 사항을 설명하지만, 전체 HTTP/1.0 사양은 RFC 1945를 참조해야 합니다. 한 가지 세부 사항을 제외하고는 RFC 1945의 관련 섹션에 따라 HTTP 요청 구문 분석기가 완벽하게 작동하는 것이 이상적입니다. 이 사양에서는 여러 줄의 요청 필드를 허용하지만, 프록시가 이를 제대로 처리할 필요는 없습니다. 물론 프록시는 잘못된 요청으로 인해 조기에 중단되지 않아야 합니다.

4.2 요청 헤더
이 실습에서 중요한 요청 헤더는 호스트, 사용자-에이전트, 연결 및 프록시 연결 헤더입니다:
 항상 Host 헤더를 보내세요. 이 동작은 기술적으로 HTTP/1.0 사양에 의해 승인되지 않지만 특정 웹 서버, 특히 가상 호스팅을 사용하는 서버에서 합리적인 응답을 유도하기 위해 필요합니다.
호스트 헤더는 최종 서버의 호스트명을 설명합니다. 예를 들어 http://www. cmu.edu/hub/index.html에 접속하려면 프록시는 다음 헤더를 전송합니다:
호스트: www.cmu.edu
웹 브라우저는 HTTP 요청에 자체 호스트 헤더를 첨부할 수 있습니다. 이 경우 프록시는 브라우저와 동일한 호스트 헤더를 사용해야 합니다.
 항상 다음 사용자-에이전트 헤더를 전송하도록 선택할 수 있습니다:
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:10.0.3) Gecko/20120305 Firefox/10.0.3
헤더는 글에서 한 줄에 맞지 않기 때문에 두 줄로 나누어 제공되지만 프록시는 헤더를 한 줄로 보내야 합니다.
사용자-에이전트 헤더는 운영 체제 및 브라우저와 같은 매개변수 측면에서 클라이언트를 식별하며, 웹 서버는 종종 이 식별 정보를 사용하여 제공하는 콘텐츠를 조작합니다. 이 특정 사용자-에이전트: 문자열을 보내면 간단한 텔넷 스타일 테스트 중에 반환되는 자료의 내용 및 다양성이 향상될 수 있습니다.
항상 다음 연결 헤더를 보내세요:
연결: 닫기
 항상 다음 프록시 연결 헤더를 보내세요:
프록시-연결: 닫기
연결 및 프록시 연결 헤더는 첫 번째 요청/응답 교환이 완료된 후 연결이 계속 유지될지 여부를 지정하는 데 사용됩니다. 프록시가 각 요청에 대해 새 연결을 열도록 하는 것은 완벽하게 허용되며 권장됩니다. 이 헤더 값으로 close를 지정하면 프록시가 첫 번째 요청/응답 교환 후 연결을 종료할 것임을 웹 서버에 알립니다.
편의를 위해 설명한 사용자-에이전트 헤더의 값은 proxy.c에서 문자열 상수로 제공됩니다.
마지막으로 브라우저가 HTTP 요청의 일부로 추가 요청 헤더를 전송하는 경우 프록시는 변경하지 않고 전달해야 합니다.

4.3 포트 번호
이 실습에는 크게 두 가지 포트 번호가 있습니다: HTTP 요청 포트와 프록시의 수신 포트입니다.
HTTP 요청 포트는 HTTP 요청 URL의 선택적 필드입니다. 즉, URL은 http://www.cmu.edu:8080/hub/index.html 형식일 수 있으며, 이 경우 프록시는 기본 HTTP 포트인 8080 포트 대신 포트 8080의 www.cmu.edu 호스트에 연결해야 합니다. 프록시는 URL에 포트 번호가 포함되어 있는지 여부에 관계없이 제대로 작동해야 합니다.
수신 포트는 프록시가 들어오는 연결을 수신 대기해야 하는 포트입니다. 프록시는 프록시의 수신 포트 번호를 지정하는 명령줄 인수를 수락해야 합니다. 예를 들어, 다음 명령을 사용하면 프록시가 포트 15213에서 연결을 수신 대기해야 합니다:
리눅스> ./proxy 15213
다른 프로세스에서 사용하지 않는다면 권한이 없는 수신 포트(1,024 이상 65,536 미만)를 선택할 수 있습니다. 각 프록시는 고유한 수신 포트를 사용해야 하고 많은 사람들이 각 컴퓨터에서 동시에 작업할 것이므로, 개인 포트 번호를 선택하는 데 도움이 되는 스크립트 port-for-user.pl이 제공됩니다. 이 스크립트를 사용하여 사용자 ID를 기반으로 포트 번호를 생성하세요:
리눅스> ./port-for-user.pl droh
droh: 45806
port-for-user.pl이 반환하는 포트 p는 항상 짝수입니다. 따라서 추가 포트 번호가 필요한 경우
포트 번호가 추가로 필요한 경우 포트 p와 p + 1을 안전하게 사용할 수 있습니다.
임의의 포트를 선택하지 마세요. 그렇게 하면 다른 사용자와 간섭을 일으킬 위험이 있습니다.